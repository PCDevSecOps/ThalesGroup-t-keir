# -*- coding: utf-8 -*-
"""Test QA System
Author: Eric Blaudez (Eric Blaudez)

Copyright (c) 2020 by THALES
"""

from thot.tasks.qa.QuestionAnsweringConfiguration import QuestionAnsweringConfiguration
from thot.tasks.qa.QuestionAnswering import QuestionAnswering
from thot.core.ThotLogger import ThotLogger, LogUserContext
import unittest
import json
import traceback
import os

dir_path = os.path.dirname(os.path.realpath(__file__))
test_file_path = os.path.abspath(os.path.join(dir_path, "../data/test-outputs-syntax"))


class TestQA(unittest.TestCase):

    test_dict = {
        "logger": {"logging-level": "debug"},
        "qa": {
            "network": {
                "host": "0.0.0.0",
                "port": 8080,
                "associate-environment": {"host": "HOST_ENVNAME", "port": "PORT_ENVNAME"},
            },
            "runtime": {
                "request-max-size": 100000000,
                "request-buffer-queue-size": 100,
                "keep-alive": True,
                "keep-alive-timeout": 5,
                "graceful-shutown-timeout": 15.0,
                "request-timeout": 60,
                "response-timeout": 60,
                "workers": 1,
            },
        },
    }

    def test_qa(self):
        try:
            with open("/tmp/cfg.json", "w") as f:
                json.dump(TestQA.test_dict, f)
                f.close()
        except Exception as e:
            print(str(e) + " trace:" + str(traceback.format_exc()))
            self.assertFalse(True)
        fh = open("/tmp/cfg.json")
        qaConfig = QuestionAnsweringConfiguration()
        qaConfig.load(fh)
        fh.close()
        with open(os.path.join(test_file_path, "mail3.txt.converted.tokenized.ms.ner.syntax.json")) as f:
            tkeir_doc = json.load(f)
            f.close()
            cid = "autogenerated-" + str("xxx")
            log_context = LogUserContext(cid)
            qa = QuestionAnswering(config=qaConfig, call_context=log_context)
            tkeir_doc = qa.questionAnsweringByTKeirDoc(
                {"doc": tkeir_doc, "query": "When does expire the LC?"}, call_context=log_context
            )
            self.assertEqual(tkeir_doc["qa"][0]["doc"]["answer"], "June 30")
