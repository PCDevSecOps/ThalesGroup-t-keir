# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author: Eric Blaudez (Eric Blaudez)

Copyright (c) 2020 by THALES
"""

from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.tasks.keywords.KeywordsConfiguration import KeywordsConfiguration
from thot.tasks.keywords.KeywordsExtractor import KeywordsExtractor
import os
import json
import unittest

dir_path = os.path.dirname(os.path.realpath(__file__))
test_file_path = os.path.abspath(os.path.join(dir_path, "../data/test-outputs-syntax"))


class TestKeywordsExtractor(unittest.TestCase):

    kw_config = {
        "logger": {"logging-level": "debug"},
        "keywords": {
            "extractors": [
                {
                    "language": "en",
                    "resources-base-path": "/home/tkeir_svc/tkeir/app/projects/default/configs",
                    "keywords-rules": "keywords-rules.json",
                }
            ],
            "network": {
                "host": "0.0.0.0",
                "port": 8080,
                "associate-environment": {"host": "HOST_ENVNAME", "port": "PORT_ENVNAME"},
            },
            "runtime": {
                "request-max-size": 100000000,
                "request-buffer-queue-size": 100,
                "keep-alive": True,
                "keep-alive-timeout": 5,
                "graceful-shutown-timeout": 15.0,
                "request-timeout": 60,
                "response-timeout": 60,
                "workers": 1,
            },
            "serialize": {
                "input": {"path": "/tmp", "keep-service-info": True},
                "output": {"path": "/tmp", "keep-service-info": True},
            },
        },
    }

    def test_kwe(self):
        cid = "autogenerated-" + str("xxx")
        log_context = LogUserContext(cid)
        config = KeywordsConfiguration()
        res_path = os.path.abspath(os.path.join(dir_path, "../../app/projects/template/configs/"))
        TestKeywordsExtractor.kw_config["keywords"]["extractors"][0]["resources-base-path"] = res_path
        config.loads(TestKeywordsExtractor.kw_config)
        ThotLogger.loads(config.logger_config.configuration)

        with open(os.path.join(test_file_path, "mail3.txt.converted.tokenized.ms.ner.syntax.json")) as f:
            tkeir_doc = json.load(f)
            f.close()
            kwe = KeywordsExtractor(config=config, call_context=log_context)
            tkeir_doc = kwe.getKeywords(tkeir_doc)
            self.assertTrue(
                tkeir_doc["keywords"]
                == [
                    {"score": 4, "text": "lackawanna letter", "span": {"start": 0, "end": 2}},
                    {"score": 1, "text": "credit", "span": {"start": 3, "end": 4}},
                    {"score": 9, "text": "discussion last week", "span": {"start": 3, "end": 6}},
                    {"score": 8, "text": "certain quality specification", "span": {"start": 109, "end": 112}},
                    {"score": 7, "text": "subordinated loan agreement", "span": {"start": 68, "end": 71}},
                    {"score": 4, "text": "loan agreement", "span": {"start": 179, "end": 181}},
                    {"score": 4, "text": "other thing", "span": {"start": 93, "end": 95}},
                    {"score": 4, "text": "independent engineer", "span": {"start": 122, "end": 124}},
                    {"score": 4, "text": "pertinent document", "span": {"start": 200, "end": 202}},
                    {"score": 3, "text": "lackawanna letter", "span": {"start": 13, "end": 15}},
                    {"score": 3, "text": "completion date", "span": {"start": 82, "end": 84}},
                    {"score": 2, "text": "specification", "span": {"start": 116, "end": 117}},
                    {"score": 2, "text": "agreement", "span": {"start": 163, "end": 164}},
                    {"score": 1, "text": "letter", "span": {"start": 192, "end": 193}},
                    {"score": 1, "text": "date", "span": {"start": 126, "end": 127}},
                    {"score": 1, "text": "information", "span": {"start": 10, "end": 11}},
                    {"score": 1, "text": "credit", "span": {"start": 194, "end": 195}},
                    {"score": 1, "text": "receipt", "span": {"start": 33, "end": 34}},
                    {"score": 1, "text": "trustee", "span": {"start": 36, "end": 37}},
                    {"score": 1, "text": "notification", "span": {"start": 38, "end": 39}},
                    {"score": 1, "text": "lc", "span": {"start": 50, "end": 51}},
                    {"score": 1, "text": "indenture", "span": {"start": 54, "end": 55}},
                    {"score": 1, "text": "same", "span": {"start": 63, "end": 64}},
                    {"score": 1, "text": "analysis", "span": {"start": 76, "end": 77}},
                    {"score": 1, "text": "requirement", "span": {"start": 79, "end": 80}},
                    {"score": 1, "text": "production", "span": {"start": 97, "end": 98}},
                    {"score": 1, "text": "approval", "span": {"start": 113, "end": 114}},
                    {"score": 1, "text": "wait", "span": {"start": 132, "end": 133}},
                    {"score": 1, "text": "thought", "span": {"start": 145, "end": 146}},
                    {"score": 1, "text": "expiration", "span": {"start": 189, "end": 190}},
                    {"score": 1, "text": "office", "span": {"start": 208, "end": 209}},
                ]
            )
