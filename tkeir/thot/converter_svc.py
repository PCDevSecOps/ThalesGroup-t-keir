# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound
from uuid import uuid4


import os
import sys
import argparse
import traceback


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.converters import __version_converter__, __date_converter__
from thot.tasks.converters.ConverterConfiguration import ConverterConfiguration
from thot.tasks.converters.Converter import Converter


# Global variables
app = Sanic("converter-service")

app.config["API_VERSION"] = __version_converter__
app.config["API_TITLE"] = "Converter Service"
app.config["API_DESCRIPTION"] = "Convert input document (raw, email, ...) to tkeir compliant representation"
app.config["API_CONTACT_EMAIL"] = __email__

x_served_by = "tkeir/converter"


class ConverterEngine:
    """Store converter as singleton
    Warning args should be set before calls
    """

    converter = None
    converter_configuration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            ConverterConfiguration: return the converter configuration load through args
        """
        if not ConverterEngine.converter_configuration:
            ConverterEngine.converter_configuration = ConverterConfiguration()
            with open(ConverterEngine.args.config) as fh:
                ConverterEngine.converter_configuration.load(fh)
                fh.close()
        return ConverterEngine.converter_configuration

    @staticmethod
    def get_converter():
        """create and return converter as singleton

        Returns:
            Converter:  return the converter
        """
        if not ConverterEngine.converter:
            ConverterEngine.converter = Converter(config=ConverterEngine.get_config())
        return ConverterEngine.converter


converter_engine = None


def service_config():
    """configure service"""

    app.config.update(
        {
            "CONFIGURATION_FILE": ConverterEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context=None):
    """[error handler service not loaded]

    Returns:
        json answer of the error
    """
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_converter__, "date": __date_converter__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    """Initialize sanic

    Args:
        sanic : Sanic app
        loop : Sanic loop
    """
    global converter_engine
    converter_engine = {
        "id": generate_id(prefix="converter"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": ConverterEngine.get_converter(),
    }
    cid = "autogenerated-" + str(uuid4())
    log_context = LogUserContext(cid)
    ThotLogger.info(Constants.SERVICE_LOADED)


def sanic_bad_parameter_response(error_description, call_context):
    """Sanic error handler bad parameter

    Args:
        error_description ([str]): description of the error

    Returns:
        [json]: sanic json error
    """
    call_context["status"] = 422
    ThotLogger.error("Bad service parameters", context=call_context)
    return sanic.response.json(
        {
            "error": error_description,
            "info": converter_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_converter__,
            "date": __date_converter__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/converter/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    """Run converter service

    Args:
        request : receptionned request

    Returns:
        the response
    """
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not converter_engine:
        ThotMetrics.increment_counter(short_name="converter-run", path="/api/converter/run", method="post", status=500)
        return service_not_loaded(log_context)
    try:
        if "datatype" not in request.json:
            return sanic_bad_parameter_response("datatype is mandatory", log_context)
        if "data" not in request.json:
            return sanic_bad_parameter_response("data is mandatory", log_context)
        if "source" not in request.json:
            return sanic_bad_parameter_response("source is mandatory", log_context)
        data = converter_engine["run"].convert(
            data_type=request.json["datatype"],
            data=request.json["data"],
            source=request.json["source"],
            call_context=log_context,
        )
        ThotMetrics.increment_counter(short_name="converter-run", path="/api/converter/run", method="post")

        return sanic.response.json(
            {
                "results": data,
                "info": converter_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_converter__,
                "date": __date_converter__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        log_context["status"] = 500
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        ThotMetrics.increment_counter(short_name="converter-run", path="/api/converter/run", method="post", status=500)
        return sanic.response.json(
            {
                "error": "[internal error]",
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": converter_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_converter__,
                "date": __date_converter__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/converter/list-types", methods=["GET", "OPTIONS"])
async def list_types(request):
    """list converter type

    Args:
        request : empty request

    Returns:
        list of available format
    """
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-Correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not converter_engine:
        ThotMetrics.increment_counter(
            short_name="converter-list-types", path="/api/converter/list-types", method="get", status=500
        )
        return service_not_loaded(log_context)
    try:
        data = converter_engine["run"].listTypes()
        ThotMetrics.increment_counter(
            short_name="converter-list-types", path="/api/converter/list-types", method="get", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": converter_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_converter__,
                "date": __date_converter__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        log_context["status"] = 500
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        ThotMetrics.increment_counter(
            short_name="converter-list-types", path="/api/converter/list-types", method="get", status=500
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": converter_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/converter/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    """get health of the service

    Args:
        request : empty

    Returns:
        json format of the reponse (that is important here is the code 200)
    """
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not converter_engine:
        ThotMetrics.increment_counter(short_name="converter-health", path="/api/converter/health", method="get", status=500)
        return service_not_loaded(log_context)

    ThotMetrics.increment_counter(short_name="converter-health", path="/api/converter/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": converter_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_converter__,
            "date": __date_converter__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not converter_engine:
        return service_not_loaded(log_context)
    log_context["status"] = 404
    ThotLogger.error("Page not found.", context=log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": converter_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_converter__,
            "date": __date_converter__,
        },
        headers={"X-Served-By": x_served_by},
        status=404,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    args = parser.parse_args()
    ConverterEngine.args = args
    if not ConverterEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(ConverterEngine.get_config().logger_config.configuration, logger_name="Converter")
        ThotMetrics.APP_NAME = "T-KEIR : converter"
        ThotMetrics.create_counter(
            short_name="converter-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="converter-list-types", function_name="list_types", counter_description="list-types function count"
        )
        ThotMetrics.create_counter(
            short_name="converter-run", function_name="run", counter_description="run_service function count"
        )
        host = ConverterEngine.get_config().net_config.configuration["network"]["host"]
        port = int(ConverterEngine.get_config().net_config.configuration["network"]["port"])
        workers = ConverterEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in ConverterEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=ConverterEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        no_x_correlation = "autogenerated-" + str(uuid4())
        log_context = LogUserContext(no_x_correlation)
        ThotLogger.error(
            "An error occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        sys.exit(-1)


if __name__ == "__main__":    
    main()
