# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Constants import exception_error_and_trace
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.morphosyntax import __version_morphosyntax__, __date_morphosyntax__
from thot.tasks.morphosyntax.MorphoSyntacticTaggerConfiguration import MorphoSyntacticTaggerConfiguration
from thot.tasks.morphosyntax.MorphoSyntacticTagger import MorphoSyntacticTagger


# Global variables
app = Sanic("mstagger-service")
app.config["API_VERSION"] = __version_morphosyntax__
app.config["API_TITLE"] = "Morphosyntactic tagger Service"
app.config["API_DESCRIPTION"] = "Tag (morpho syntax) a document in tkeir format (generally coming from tokenizer service)"
app.config["API_CONTACT_EMAIL"] = __email__

x_served_by = "tkeir/mstagger"


class MSTaggerEngine:
    """Store tagger as singleton
    Warning args should be set before calls
    """

    tagger = None
    taggerConfiguration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            MorphoSyntacticTaggerConfiguration: return the morphosyntactic tagger configuration load through args
        """
        if not MSTaggerEngine.taggerConfiguration:
            MSTaggerEngine.taggerConfiguration = MorphoSyntacticTaggerConfiguration()
            with open(MSTaggerEngine.args.config) as fh:
                MSTaggerEngine.taggerConfiguration.load(fh)
                fh.close()
        return MSTaggerEngine.taggerConfiguration

    @staticmethod
    def getMSTagger(call_context=None):
        """create and return mstagger as singleton

        Returns:
            MSTagger:  return the mstagger
        """
        if not MSTaggerEngine.tagger:
            MSTaggerEngine.tagger = MorphoSyntacticTagger(config=MSTaggerEngine.get_config(), call_context=call_context)
        return MSTaggerEngine.tagger


mstagger_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": MSTaggerEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_morphosyntax__, "date": __date_morphosyntax__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global mstagger_engine
    cid = "autogenerated-" + str(uuid4())
    log_context = LogUserContext(cid)
    mstagger_engine = {
        "id": generate_id(prefix="mstagger"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": MSTaggerEngine.getMSTagger(call_context=log_context),
    }
    ThotLogger.info(Constants.SERVICE_LOADED, context=log_context)


def sanic_bad_paramter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": mstagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_morphosyntax__,
            "date": __date_morphosyntax__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/mstagger/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not mstagger_engine:
        ThotMetrics.increment_counter(short_name="mstagger-run", path="/api/mstagger/run", method="post", status=500)
        return service_not_loaded(log_context)
    try:
        ThotMetrics.increment_counter(short_name="mstagger-run", path="/api/mstagger/run", method="post", status=200)
        data = mstagger_engine["run"].tag(request.json)
        return sanic.response.json(
            {
                "results": data,
                "info": mstagger_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_morphosyntax__,
                "date": __date_morphosyntax__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": mstagger_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_morphosyntax__,
                "date": __date_morphosyntax__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/mstagger/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not mstagger_engine:
        ThotMetrics.increment_counter(short_name="mstagger-health", path="/api/mstagger/health", method="get", status=500)
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(short_name="mstagger-health", path="/api/mstagger/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": mstagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_morphosyntax__,
            "date": __date_morphosyntax__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not mstagger_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": mstagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_morphosyntax__,
            "date": __date_morphosyntax__,
        },
        headers={"X-Served-By": x_served_by},
        status=400,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")  
    args = parser.parse_args()
    MSTaggerEngine.args = args
    if not MSTaggerEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(MSTaggerEngine.get_config().logger_config.configuration, logger_name="MS-Tagger")
        ThotMetrics.APP_NAME = "T-KEIR : mstagger"
        ThotMetrics.create_counter(
            short_name="mstagger-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="mstagger-run", function_name="run", counter_description="run_service function count"
        )
        host = MSTaggerEngine.get_config().net_config.configuration["network"]["host"]
        port = int(MSTaggerEngine.get_config().net_config.configuration["network"]["port"])
        workers = MSTaggerEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in MSTaggerEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=MSTaggerEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured.", trace=exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    main()
