# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound


import os
import sys
import json
import argparse
import traceback
import gc
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

import thot.core.Constants as Constants
from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.relations import __version_relations__, __date_relations__
from thot.tasks.relations.RelationClusterizerConfiguration import RelationClusterizerConfiguration
from thot.tasks.relations.ClusterInference import ClusteringInference


x_served_by = "tkeir/clusterinfer"

# Global variables
app = Sanic("clusterinfer-service")
app.config["API_VERSION"] = __version_relations__
app.config["API_TITLE"] = "ClusteringInference Service"
app.config["API_DESCRIPTION"] = "Tokenize document in tkeir format (generally coming from converter service)"
app.config["API_CONTACT_EMAIL"] = __email__


class ClusterInferEngine:
    """Store clusterinfer as singleton
    Warning args should be set before calls
    """

    clusterinfer = None
    clusterinfer_configuration = None
    args = None
    count_run = 0

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            RelationClusterizerConfiguration: return the clusterinfer configuration load through args
        """
        if not ClusterInferEngine.clusterinfer_configuration:
            ClusterInferEngine.clusterinfer_configuration = RelationClusterizerConfiguration()
            with open(ClusterInferEngine.args.config) as fh:
                ClusterInferEngine.clusterinfer_configuration.load(fh)
                fh.close()
        return ClusterInferEngine.clusterinfer_configuration

    @staticmethod
    def get_clustering_inference():
        """create and return clusterinfer as singleton

        Returns:
            ClusteringInference:  return the clusterinfer
        """
        log_context = LogUserContext("autogenerated-" + str(uuid4()))
        if not ClusterInferEngine.clusterinfer:
            ClusterInferEngine.clusterinfer = ClusteringInference(
                config=ClusterInferEngine.get_config(), call_context=log_context
            )
        return ClusterInferEngine.clusterinfer

    @staticmethod
    def reload_at(max_count):
        log_context = LogUserContext("autogenerated-" + str(uuid4()))
        ClusterInferEngine.count_run = ClusterInferEngine.count_run + 1
        if ClusterInferEngine.count_run > max_count:
            ClusterInferEngine.count_run = 0
            del ClusterInferEngine.clusterinfer
            gc.collect()
            ClusterInferEngine.clusterinfer = ClusteringInference(
                config=ClusterInferEngine.get_config(), call_context=log_context
            )
            ThotLogger.info("Free memory, prevent memory leak")


clusterinfer_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": ClusterInferEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_relations__, "date": __date_relations__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global clusterinfer_engine
    clusterinfer_engine = {
        "id": generate_id(prefix="clusterinfer"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": ClusterInferEngine.get_clustering_inference(),
    }
    ThotLogger.info(Constants.SERVICE_LOADED)


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": clusterinfer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_relations__,
            "date": __date_relations__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/clusterinfer/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not clusterinfer_engine:
        ThotMetrics.increment_counter(short_name="clusterinfer-run", path="/api/clusterinfer/run", method="get", status=500)
        return service_not_loaded(log_context)
    try:

        ci_status = 200
        data = clusterinfer_engine["run"].infer(request.json, call_context=log_context)
        if data["error"]:
            ci_status = 500
        ThotMetrics.increment_counter(
            short_name="clusterinfer-run", path="/api/clusterinfer/run", method="get", status=ci_status
        )
        # ClusterInferEngine.reload_at(100)
        return sanic.response.json(
            {
                "results": data,
                "info": clusterinfer_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_relations__,
                "date": __date_relations__,
            },
            headers={"X-Served-By": x_served_by},
            status=ci_status,
        )
    except Exception as e:
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": clusterinfer_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_relations__,
                "date": __date_relations__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/clusterinfer/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not clusterinfer_engine:
        ThotMetrics.increment_counter(
            short_name="clusterinfer-health", path="/api/clusterinfer/health", method="get", status=500
        )
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(short_name="clusterinfer-health", path="/api/clusterinfer/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": clusterinfer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_relations__,
            "date": __date_relations__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not clusterinfer_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": clusterinfer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_relations__,
            "date": __date_relations__,
        },
        headers={"X-Served-By": x_served_by},
        status=404,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    parser.add_argument("-i", "--init", default=False, action="store_true", help="Initializer resources")
    args = parser.parse_args()
    ClusterInferEngine.args = args
    if not ClusterInferEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(ClusterInferEngine.get_config().logger_config.configuration, logger_name="ClusterInfer")
        ThotMetrics.APP_NAME = "T-KEIR : clusterinfer"
        ThotMetrics.create_counter(
            short_name="clusterinfer-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="clusterinfer-run", function_name="run", counter_description="run_service function count"
        )
        host = ClusterInferEngine.get_config().net_config.configuration["network"]["host"]
        port = int(ClusterInferEngine.get_config().net_config.configuration["network"]["port"])
        workers = ClusterInferEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in ClusterInferEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=ClusterInferEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured." + Constants.exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    main()
