# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.keywords import __version_keywords__, __date_keywords__
from thot.tasks.keywords.KeywordsConfiguration import KeywordsConfiguration
from thot.tasks.keywords.KeywordsExtractor import KeywordsExtractor


# Global variables
app = Sanic("keyword-extractor")
app.config["API_VERSION"] = __version_keywords__
app.config["API_TITLE"] = "Keyword Extractor Service"
app.config[
    "API_DESCRIPTION"
] = "Extract Keywords from a document in tkeir format (generally coming from keywordextractor service)"
app.config["API_CONTACT_EMAIL"] = __email__

x_served_by = "tkeir/keywordextractor"


class KeywordExtractorEngine:
    """Store tagger as singleton
    Warning args should be set before calls
    """

    keywordsConfiguration = None
    args = None
    keywordsExtractor = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            KeywordExtractorConfiguration: return the keyword extractor configuration load through args
        """
        if not KeywordExtractorEngine.keywordsConfiguration:
            KeywordExtractorEngine.keywordsConfiguration = KeywordsConfiguration()
            with open(KeywordExtractorEngine.args.config) as fh:
                KeywordExtractorEngine.keywordsConfiguration.load(fh)
                fh.close()
        return KeywordExtractorEngine.keywordsConfiguration

    @staticmethod
    def getKeywordExtractor():
        """create and return keywordextractor as singleton

        Returns:
            KeywordExtractor:  return the keywordextractor
        """
        if not KeywordExtractorEngine.keywordsExtractor:
            KeywordExtractorEngine.keywordsExtractor = KeywordsExtractor(config=KeywordExtractorEngine.get_config())
        return KeywordExtractorEngine.keywordsExtractor


keywordextractor_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": KeywordExtractorEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_keywords__, "date": __date_keywords__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global keywordextractor_engine
    keywordextractor_engine = {
        "id": generate_id(prefix="keywordextractor"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": KeywordExtractorEngine.getKeywordExtractor(),
    }
    ThotLogger.info("Service loaded")


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": keywordextractor_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_keywords__,
            "date": __date_keywords__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/keywordsextractor/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not keywordextractor_engine:
        ThotLogger.error("Service is not loaded", context=log_context)
        ThotMetrics.increment_counter(
            short_name="keywordsextractor-run", path="/api/keywordsextractor/run", method="post", status=500
        )
        return service_not_loaded(log_context)
    try:
        data = keywordextractor_engine["run"].getKeywords(request.json)
        ThotMetrics.increment_counter(
            short_name="keywordsextractor-run", path="/api/keywordsextractor/run", method="post", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": keywordextractor_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_keywords__,
                "date": __date_keywords__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(
            short_name="keywordsextractor-run", path="/api/keywordsextractor/run", method="post", status=500
        )
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": keywordextractor_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_keywords__,
                "date": __date_keywords__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/keywordsextractor/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not keywordextractor_engine:
        ThotLogger.error("Service is not loaded", context=log_context)
        ThotMetrics.increment_counter(
            short_name="keywordsextractor-health", path="/api/keywordsextractor/health", method="get", status=500
        )
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(
        short_name="keywordsextractor-health", path="/api/keywordsextractor/health", method="get", status=200
    )
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": keywordextractor_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_keywords__,
            "date": __date_keywords__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not keywordextractor_engine:
        ThotLogger.error("Service is not loaded", context=log_context)
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": keywordextractor_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_keywords__,
            "date": __date_keywords__,
        },
        headers={"X-Served-By": x_served_by},
        status=400,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    args = parser.parse_args()
    KeywordExtractorEngine.args = args
    if not KeywordExtractorEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(KeywordExtractorEngine.get_config().logger_config.configuration, logger_name="Keywords")
        ThotMetrics.APP_NAME = "T-KEIR : keywordsextractor"
        ThotMetrics.create_counter(
            short_name="keywordsextractor-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="keywordsextractor-run", function_name="run", counter_description="run_service function count"
        )
        host = KeywordExtractorEngine.get_config().net_config.configuration["network"]["host"]
        port = int(KeywordExtractorEngine.get_config().net_config.configuration["network"]["port"])
        workers = KeywordExtractorEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in KeywordExtractorEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=KeywordExtractorEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured." + Constants.exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    main()
