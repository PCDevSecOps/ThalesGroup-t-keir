# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import json
import argparse
import traceback
from uuid import uuid4
import gc


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.indexing import __version_indexing__, __date_indexing__
from thot.tasks.indexing.IndexingConfiguration import IndexingConfiguration
from thot.tasks.indexing.Indexing import Indexing

from thot.tasks.indexing.IndicesManager import IndicesManager


# Global variables
app = Sanic("indexing-service")
app.config["API_VERSION"] = __version_indexing__
app.config["API_TITLE"] = "Indexing Service"
app.config["API_DESCRIPTION"] = "Put analyzed document into an index"
app.config["API_CONTACT_EMAIL"] = __email__

x_served_by = "tkeir/indexing"


class IndexingEngine:
    """Store indexing as singleton
    Warning args should be set before calls
    """

    indexing = None
    indexing_configuration = None
    args = None
    count_run = 0

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            IndexingConfiguration: return the indexing configuration load through args
        """
        if not IndexingEngine.indexing_configuration:
            IndexingEngine.indexing_configuration = IndexingConfiguration()
            with open(IndexingEngine.args.config) as fh:
                IndexingEngine.indexing_configuration.load(fh)
                fh.close()
        return IndexingEngine.indexing_configuration

    @staticmethod
    def get_indexing():
        """create and return indexing as singleton

        Returns:
            Indexing:  return the indexing
        """
        if not IndexingEngine.indexing:
            IndexingEngine.indexing = Indexing(config=IndexingEngine.get_config())
        return IndexingEngine.indexing

    @staticmethod
    def reload_at(max_count):
        IndexingEngine.count_run = IndexingEngine.count_run + 1
        if IndexingEngine.count_run > max_count:
            IndexingEngine.count_run = 0
            del IndexingEngine.indexing
            gc.collect()
            IndexingEngine.indexing = Indexing(config=IndexingEngine.get_config())
            ThotLogger.info("Free memory, prevent memory leak")


indexing_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": IndexingEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_indexing__, "date": __date_indexing__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global indexing_engine
    indexing_engine = {
        "id": generate_id(prefix="indexing"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": IndexingEngine.get_indexing(),
    }
    ThotLogger.info("Service loaded")


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": indexing_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_indexing__,
            "date": __date_indexing__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/indexing/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not indexing_engine:
        ThotMetrics.increment_counter(short_name="indexing-run", path="/api/indexing/run", method="get", status=500)
        return service_not_loaded(log_context)
    try:

        index_status = 200
        res = indexing_engine["run"].index(request.json, call_context=log_context)
        ThotMetrics.increment_counter(short_name="indexing-run", path="/api/indexing/run", method="get", status=200)
        return sanic.response.json(
            {
                "results": res,
                "info": indexing_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_indexing__,
                "date": __date_indexing__,
            },
            headers={"X-Served-By": x_served_by},
            status=index_status,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="indexing-run", path="/api/indexing/run", method="get", status=500)
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": indexing_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_indexing__,
                "date": __date_indexing__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/indexing/del", methods=["GET", "OPTIONS"])
async def run_del(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not indexing_engine:
        ThotMetrics.increment_counter(short_name="indexing-del", path="/api/indexing/del", method="get", status=500)
        return service_not_loaded(log_context)
    try:
        if ("id" not in request.args) or (len(request.args["id"]) == 0):
            ThotMetrics.increment_counter(short_name="indexing-del", path="/api/indexing/del", method="get", status=500)
            raise ValueError("id is mandatory")
        results = []
        for did in request.args["id"]:
            results.append(indexing_engine["run"].remove(did, call_context=log_context))
        index_status = 200
        ThotMetrics.increment_counter(short_name="indexing-del", path="/api/indexing/del", method="get", status=200)
        return sanic.response.json(
            {
                "results": results,
                "info": indexing_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_indexing__,
                "date": __date_indexing__,
            },
            headers={"X-Served-By": x_served_by},
            status=index_status,
        )
    except Exception as e:
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        ThotMetrics.increment_counter(short_name="indexing-del", path="/api/indexing/del", method="get", status=500)
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": indexing_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_indexing__,
                "date": __date_indexing__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/indexing/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not indexing_engine:
        ThotMetrics.increment_counter(short_name="indexing-health", path="/api/indexing/health", method="get", status=500)
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(short_name="indexing-health", path="/api/indexing/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": indexing_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_indexing__,
            "date": __date_indexing__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not indexing_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": indexing_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_indexing__,
            "date": __date_indexing__,
        },
        headers={"X-Served-By": x_served_by},
        status=404,
    )

@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    args = parser.parse_args()
    IndexingEngine.args = args
    if not IndexingEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(IndexingEngine.get_config().logger_config.configuration, logger_name="Index")
        ThotMetrics.APP_NAME = "T-KEIR : indexing"
        ThotMetrics.create_counter(
            short_name="indexing-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="indexing-run", function_name="run", counter_description="run_service function count"
        )
        ThotMetrics.create_counter(short_name="indexing-del", function_name="del", counter_description="del function count")
        host = IndexingEngine.get_config().net_config.configuration["network"]["host"]
        port = int(IndexingEngine.get_config().net_config.configuration["network"]["port"])
        workers = IndexingEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        indexing = IndexingEngine.get_indexing()
        try:
            IndicesManager.createIndices(config=IndexingEngine.get_config().configuration)
        except Exception as e:
            tracebck = traceback.format_exc()
            ThotLogger.error(Constants.exception_error_and_trace(str(e), str(tracebck)))
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in IndexingEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=IndexingEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured." + Constants.exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    main()
