# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.summarizer import __version_summarizer__, __date_summarizer__
from thot.tasks.summarizer.SummarizerConfiguration import SummarizerConfiguration
from thot.tasks.summarizer.Summarizer import Summarizer


# Global variables
app = Sanic("summarizer-service")
app.config["API_VERSION"] = __version_summarizer__
app.config["API_TITLE"] = "Summarizer Service"
app.config["API_DESCRIPTION"] = "Summarize a document"
app.config["API_CONTACT_EMAIL"] = __email__

class SummarizerEngine:
    """Store summarizer as singleton
    Warning args should be set before calls
    """

    summarizer = None
    summarizerConfiguration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            SummarizerConfiguration: return the document summarizer configuration load through args
        """
        if not SummarizerEngine.summarizerConfiguration:
            SummarizerEngine.summarizerConfiguration = SummarizerConfiguration()
            with open(SummarizerEngine.args.config) as fh:
                SummarizerEngine.summarizerConfiguration.load(fh)
                fh.close()
        return SummarizerEngine.summarizerConfiguration

    @staticmethod
    def getsummarizer():
        """create and return summarizer as singleton

        Returns:
            Tokenizer:  return the summarizer
        """
        if not SummarizerEngine.summarizer:
            SummarizerEngine.summarizer = Summarizer(config=SummarizerEngine.get_config())
        return SummarizerEngine.summarizer


summarizer_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": SummarizerEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_summarizer__, "date": __date_summarizer__},
        headers={"X-Served-By": "tkeir/summarizer"},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global summarizer_engine
    cid = "autogenerated-" + str(uuid4())
    log_context = LogUserContext(cid)
    summarizer_engine = {
        "id": generate_id(prefix="summarizer"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": SummarizerEngine.getsummarizer(),
    }
    ThotLogger.info(Constants.SERVICE_LOADED, context=log_context)


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": summarizer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_summarizer__,
            "date": __date_summarizer__,
        },
        headers={"X-Served-By": "tkeir/summarizer"},
        status=422,
    )


@app.route("/api/summarizer/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not summarizer_engine:
        ThotMetrics.increment_counter(short_name="summarizer-run", path="/api/summarizer/run", method="post", status=500)
        return service_not_loaded(log_context)
    try:
        summary_doc = request.json
        r_data = dict()
        if "doc" not in summary_doc:
            r_data["doc"] = summary_doc
        else:
            r_data = summary_doc
        if "min-length" not in r_data:
            r_data["min-length"] = 20
            r_data["max-length"] = 100
        data = summarizer_engine["run"].summarizationByTextBlocks(r_data, call_context=log_context)
        ThotMetrics.increment_counter(short_name="summarizer-run", path="/api/summarizer/run", method="post", status=200)
        return sanic.response.json(
            {
                "results": data,
                "info": summarizer_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_summarizer__,
                "date": __date_summarizer__,
            },
            headers={"X-Served-By": "tkeir/summarizer"},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="summarizer-run", path="/api/summarizer/run", method="post", status=500)
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": summarizer_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_summarizer__,
                "date": __date_summarizer__,
            },
            headers={"X-Served-By": "tkeir/summarizer"},
            status=500,
        )


@app.route("/api/summarizer/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not summarizer_engine:
        ThotMetrics.increment_counter(short_name="summarizer-health", path="/api/summarizer/health", method="get", status=500)
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(short_name="summarizer-health", path="/api/summarizer/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": summarizer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_summarizer__,
            "date": __date_summarizer__,
        },
        headers={"X-Served-By": "tkeir/summarizer"},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not summarizer_engine:
        return service_not_loaded(log_context)
    log_context["status"] = 404
    ThotLogger.error("Page not found.", context=log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_HEALTH_OK,
            "info": summarizer_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_summarizer__,
            "date": __date_summarizer__,
        },
        headers={"X-Served-By": "tkeir/summarizer"},
        status=400,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    parser.add_argument("-i", "--init", default=False, action="store_true")
    args = parser.parse_args()
    SummarizerEngine.args = args
    if not SummarizerEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(SummarizerEngine.get_config().logger_config.configuration, logger_name="Summarizer")
        ThotMetrics.APP_NAME = "T-KEIR : summarizer"
        ThotMetrics.create_counter(
            short_name="summarizer-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="summarizer-run", function_name="run", counter_description="run_service function count"
        )
        host = SummarizerEngine.get_config().net_config.configuration["network"]["host"]
        port = int(SummarizerEngine.get_config().net_config.configuration["network"]["port"])
        workers = SummarizerEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        SummarizerEngine.getsummarizer()
        if not args.init:
            use_ssl = os.getenv("TKEIR_USE_SSL", "True")
            if ("ssl" in SummarizerEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
                ThotLogger.info("Run service with SSL")
                app.run(
                    host=host,
                    port=port,
                    workers=workers,
                    ssl=SummarizerEngine.get_config().net_config.configuration["network"]["ssl"],
                )
            else:
                app.run(host=host, port=port, workers=workers)
    except Exception as e:
        no_x_correlation = "autogenerated-" + str(uuid4())
        log_context = LogUserContext(no_x_correlation)
        ThotLogger.error(
            "An error occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        sys.exit(-1)


if __name__ == "__main__":
    main()
