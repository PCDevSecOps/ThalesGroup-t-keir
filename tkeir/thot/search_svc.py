# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from requests.models import parse_url
from sanic import Sanic
from sanic_cors import CORS
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
import urllib.parse
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.searching import __version_searching__, __date_searching__
from thot.tasks.searching.SearchingConfiguration import SearchingConfiguration
from thot.tasks.searching.Searching import Searching


# Global variables
app = Sanic("searching-service")
app.config["API_VERSION"] = __version_searching__
app.config["API_TITLE"] = "Searching Service"
app.config["API_DESCRIPTION"] = "Search document"
app.config["API_CONTACT_EMAIL"] = __email__


x_served_by = "tkeir/searching"


class SearchingEngine:
    """Store searcher as singleton
    Warning args should be set before calls
    """

    searcher = None
    searchingConfiguration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            SearchingConfiguration: return the ner tagger configuration load through args
        """
        if not SearchingEngine.searchingConfiguration:
            SearchingEngine.searchingConfiguration = SearchingConfiguration()
            with open(SearchingEngine.args.config) as fh:
                SearchingEngine.searchingConfiguration.load(fh)
                fh.close()
        return SearchingEngine.searchingConfiguration

    @staticmethod
    def getSearching():
        """create and return searching as singleton

        Returns:
            Searching:  return the searching
        """
        if not SearchingEngine.searcher:
            SearchingEngine.searcher = Searching(config=SearchingEngine.get_config())
        return SearchingEngine.searcher


searching_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": SearchingEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_searching__, "date": __date_searching__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global searching_engine
    searching_engine = {
        "id": generate_id(prefix="searching"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": SearchingEngine.getSearching(),
    }
    ThotLogger.info(Constants.SERVICE_LOADED)


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": searching_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_searching__,
            "date": __date_searching__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/searching/custom_structured_query", methods=["POST", "OPTIONS"])
async def run_custom_structured_query_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(
            short_name="search-custom-query", path="/api/searching/custom_structured_query", method="post", status=500
        )
        return service_not_loaded(log_context)
    try:
        data = searching_engine["run"].custom_structured_query(request.json)
        ThotMetrics.increment_counter(
            short_name="search-custom-query", path="/api/searching/custom_structured_query", method="post", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        ThotMetrics.increment_counter(
            short_name="search-custom-query", path="/api/searching/custom_structured_query", method="post", status=500
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/searching/query_with_doc", methods=["POST", "OPTIONS"])
async def run_service_query_with_doc(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(
            short_name="search-query-with-doc", path="/api/searching/query_with_doc", method="post", status=500
        )
        return service_not_loaded(log_context)
    try:
        data = searching_engine["run"].querying_with_doc(request.json)
        ThotMetrics.increment_counter(
            short_name="search-query-with-doc", path="/api/searching/query_with_doc", method="post", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        ThotMetrics.increment_counter(
            short_name="search-query-with-doc", path="/api/searching/query_with_doc", method="post", status=500
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/searching/querying", methods=["POST", "OPTIONS"])
async def run_service_querying(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="post", status=500)
        return service_not_loaded(log_context)
    try:
        data = searching_engine["run"].querying_with_sentence(request.json, call_context=log_context)
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="post", status=200)
        return sanic.response.json(
            {
                "results": data,
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="post", status=500)
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/searching/querying", methods=["GET"])
async def run_service_querying_get(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="get", status=500)
        return service_not_loaded(log_context)
    try:
        q = request.args.get("q", None)
        if q is None:
            raise ValueError("Query is mandarory")
        from_ = request.args.get("from", 0)
        size = request.args.get("size", 10)
        query = {"from": from_, "size": size, "content": urllib.parse.unquote(q)}
        data = searching_engine["run"].querying_with_sentence(query, call_context=log_context)
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="get", status=200)
        return sanic.response.json(
            {
                "results": data,
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="search-querying", path="/api/searching/querying", method="get", status=500)
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/searching/suggest", methods=["GET"])
async def run_service_suggestion(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(short_name="search-suggest", path="/api/searching/suggest", method="get", status=500)
        return service_not_loaded(log_context)
    try:
        q = request.args.get("q", None)
        if q is None:
            raise ValueError("Query is mandarory")
        data = searching_engine["run"].suggest(q, call_context=log_context)
        ThotMetrics.increment_counter(short_name="search-suggest", path="/api/searching/suggest", method="get", status=200)
        return sanic.response.json(
            {
                "results": data,
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="search-suggest", path="/api/searching/suggest", method="get", status=500)
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": searching_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_searching__,
                "date": __date_searching__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/searching/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        ThotMetrics.increment_counter(short_name="search-health", path="/api/searching/health", method="get", status=500)
        return service_not_loaded(log_context)

    ThotMetrics.increment_counter(short_name="search-health", path="/api/searching/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": searching_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_searching__,
            "date": __date_searching__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not searching_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_HEALTH_OK,
            "info": searching_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_searching__,
            "date": __date_searching__,
        },
        headers={"X-Served-By": x_served_by},
        status=400,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    args = parser.parse_args()
    SearchingEngine.args = args
    if not SearchingEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        
        CORS(
            app,
            resources={
                r"/api/searching/health": {"origins": "*"},
                r"/api/searching/querying": {"origins": "*"},
                r"/api/searching/suggest": {"origins": "*"},
                r"/metrics": {"origins": "*"},
                r"/api/searching/query_with_doc": {"origins": "*"},
                r"/api/searching/custom_structured_query": {"origins": "*"},
            },
        )

        # initialize logger
        ThotLogger.loads(SearchingEngine.get_config().logger_config.configuration, logger_name="Search")
        ThotMetrics.APP_NAME = "T-KEIR : search"
        ThotMetrics.create_counter(
            short_name="search-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="search-run", function_name="run", counter_description="run_service function count"
        )
        ThotMetrics.create_counter(
            short_name="search-suggest", function_name="suggest", counter_description="suggest_service function count"
        )
        ThotMetrics.create_counter(
            short_name="search-querying", function_name="querying", counter_description="querying function count"
        )
        ThotMetrics.create_counter(
            short_name="search-custom-query",
            function_name="custom_query",
            counter_description="custom query service function count",
        )
        host = SearchingEngine.get_config().net_config.configuration["network"]["host"]
        port = int(SearchingEngine.get_config().net_config.configuration["network"]["port"])
        workers = SearchingEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        SearchingEngine.getSearching()
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in SearchingEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=SearchingEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured." + Constants.exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    main()
