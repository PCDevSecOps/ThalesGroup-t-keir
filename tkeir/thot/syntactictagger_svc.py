# -*- coding: utf-8 -*-
"""Do syntactic analysis on a tkeir document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.syntax import __version_syntax__, __date_syntax__
from thot.tasks.syntax.SyntacticTaggerConfiguration import SyntacticTaggerConfiguration
from thot.tasks.syntax.SyntacticTagger import SyntacticTagger


# Global variables
app = Sanic("syntactic-tagger")
app.config["API_VERSION"] = __version_syntax__
app.config["API_TITLE"] = "Syntactic tagger Service"
app.config["API_DESCRIPTION"] = "Tag (syntax) a document in tkeir format (generally coming from syntactictagger service)"
app.config["API_CONTACT_EMAIL"] = __email__


class SyntacticTaggerEngine:
    """Store tagger as singleton
    Warning args should be set before calls
    """

    tagger = None
    taggerConfiguration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            SyntacticTaggerConfiguration: return the syntactic tagger configuration load through args
        """
        if not SyntacticTaggerEngine.taggerConfiguration:
            SyntacticTaggerEngine.taggerConfiguration = SyntacticTaggerConfiguration()
            with open(SyntacticTaggerEngine.args.config) as fh:
                SyntacticTaggerEngine.taggerConfiguration.load(fh)
                fh.close()
        return SyntacticTaggerEngine.taggerConfiguration

    @staticmethod
    def getSyntacticTagger():
        """create and return syntactictagger as singleton

        Returns:
            SyntacticTagger:  return the syntactictagger
        """
        if not SyntacticTaggerEngine.tagger:
            SyntacticTaggerEngine.tagger = SyntacticTagger(config=SyntacticTaggerEngine.get_config())
        return SyntacticTaggerEngine.tagger


syntactictagger_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": SyntacticTaggerEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_syntax__, "date": __date_syntax__},
        headers={"X-Served-By": "tkeir/syntactictagger"},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global syntactictagger_engine
    syntactictagger_engine = {
        "id": generate_id(prefix="syntactictagger"),
        "ppid": os.getppid(),
        "pid": os.getpid(),
        "run": SyntacticTaggerEngine.getSyntacticTagger(),
    }
    ThotLogger.info("Service loaded")


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": syntactictagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_syntax__,
            "date": __date_syntax__,
        },
        headers={"X-Served-By": "tkeir/syntactictagger"},
        status=422,
    )


@app.route("/api/syntactictagger/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not syntactictagger_engine:
        ThotMetrics.increment_counter(
            short_name="syntactictagger-run", path="/api/syntactictagger/run", method="post", status=500
        )
        return service_not_loaded(log_context)
    try:
        data = syntactictagger_engine["run"].tag(request.json)
        ThotMetrics.increment_counter(
            short_name="syntactictagger-run", path="/api/syntactictagger/run", method="post", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": syntactictagger_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_syntax__,
                "date": __date_syntax__,
            },
            headers={"X-Served-By": "tkeir/syntactictagger"},
            status=200,
        )
    except Exception as e:
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": syntactictagger_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_syntax__,
                "date": __date_syntax__,
            },
            headers={"X-Served-By": "tkeir/syntactictagger"},
            status=500,
        )


@app.route("/api/syntactictagger/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not syntactictagger_engine:
        ThotMetrics.increment_counter(
            short_name="syntactictagger-run", path="/api/syntactictagger/run", method="get", status=500
        )
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": syntactictagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_syntax__,
            "date": __date_syntax__,
        },
        headers={"X-Served-By": "tkeir/syntactictagger"},
        status=200,
    )


@app.exception(NotFound)
async def function_not_found(request, exception):
    if not syntactictagger_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": syntactictagger_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_syntax__,
            "date": __date_syntax__,
        },
        headers={"X-Served-By": "tkeir/syntactictagger"},
        status=400,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    args = parser.parse_args()
    SyntacticTaggerEngine.args = args
    if not SyntacticTaggerEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(SyntacticTaggerEngine.get_config().logger_config.configuration, logger_name="Syntax")
        ThotMetrics.APP_NAME = "T-KEIR : syntactictagger"
        ThotMetrics.create_counter(
            short_name="syntactictagger-health", function_name="health", counter_description="Health function count"
        )
        ThotMetrics.create_counter(
            short_name="syntactictagger-run", function_name="run", counter_description="run_service function count"
        )
        host = SyntacticTaggerEngine.get_config().net_config.configuration["network"]["host"]
        port = int(SyntacticTaggerEngine.get_config().net_config.configuration["network"]["port"])
        workers = SyntacticTaggerEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        use_ssl = os.getenv("TKEIR_USE_SSL", "True")
        if ("ssl" in SyntacticTaggerEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
            ThotLogger.info("Run service with SSL")
            app.run(
                host=host,
                port=port,
                workers=workers,
                ssl=SyntacticTaggerEngine.get_config().net_config.configuration["network"]["ssl"],
            )
        else:
            app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error(
            "An error occured.Exception:" + Constants.exception_error_and_trace(str(e), str(traceback.format_exc()))
        )
        sys.exit(-1)


if __name__ == "__main__":
    main()
