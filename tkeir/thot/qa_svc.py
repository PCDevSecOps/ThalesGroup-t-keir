# -*- coding: utf-8 -*-
"""Convert source document to tkeir indexer document
Author : Eric Blaudez (Eric Blaudez)

Copyright (c) 2022 THALES 
All Rights Reserved.
"""
import requests
from sanic import Sanic
from sanic.exceptions import ServerError
import sanic.response
from sanic.exceptions import NotFound

import os
import sys
import argparse
import traceback
from uuid import uuid4


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "../")))
sys.path.insert(0, os.path.abspath(os.path.join(dir_path, "./")))

from thot import __author__, __copyright__, __credits__, __maintainer__, __email__, __status__
import thot.core.Constants as Constants
from thot.core.ThotLogger import ThotLogger, LogUserContext
from thot.core.ThotMetrics import ThotMetrics
from thot.core.Utils import generate_id, type_to_bool
from thot.tasks.qa import __version_qa__, __date_qa__
from thot.tasks.qa.QuestionAnsweringConfiguration import QuestionAnsweringConfiguration
from thot.tasks.qa.QuestionAnswering import QuestionAnswering


# Global variables
app = Sanic("qa-service")
app.config["API_VERSION"] = __version_qa__
app.config["API_TITLE"] = "Question & Answering Service"
app.config["API_DESCRIPTION"] = "Extract a resposons from a document according to a query"
app.config["API_CONTACT_EMAIL"] = __email__

x_served_by = "tkeir/qa"


class QAEngine:
    """Store qa as singleton
    Warning args should be set before calls
    """

    qa = None
    qaConfiguration = None
    args = None

    @staticmethod
    def get_config():
        """create an return configuration as singleton

        Returns:
            qaConfiguration: return the document qa configuration load through args
        """
        if not QAEngine.qaConfiguration:
            QAEngine.qaConfiguration = QuestionAnsweringConfiguration()
            with open(QAEngine.args.config) as fh:
                QAEngine.qaConfiguration.load(fh)
                fh.close()
        return QAEngine.qaConfiguration

    @staticmethod
    def getqa():
        """create and return qa as singleton

        Returns:
            QAEngine:  return the qa
        """
        if not QAEngine.qa:
            QAEngine.qa = QuestionAnswering(config=QAEngine.get_config())
        return QAEngine.qa


qa_engine = None


def service_config():
    app.config.update(
        {
            "CONFIGURATION_FILE": QAEngine.args.config,
        }
    )
    app.config["FALLBACK_ERROR_FORMAT"] = "json"


def service_not_loaded(call_context):
    call_context["status"] = 500
    ThotLogger.error("Service is not loaded", context=call_context)
    return sanic.response.json(
        {"error": Constants.SERVICE_NOT_LOADED, "version": __version_qa__, "date": __date_qa__},
        headers={"X-Served-By": x_served_by},
        status=500,
    )


@app.listener("before_server_start")
async def setup_config(app, loop):
    service_config()


@app.listener("after_server_start")
def init(sanic, loop):
    global qa_engine
    qa_engine = {"id": generate_id(prefix="qa"), "ppid": os.getppid(), "pid": os.getpid(), "run": QAEngine.getqa()}
    ThotLogger.info("Service loaded")


def sanic_bad_parameter_response(error_description):
    return sanic.response.json(
        {
            "error": error_description,
            "info": qa_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_qa__,
            "date": __date_qa__,
        },
        headers={"X-Served-By": x_served_by},
        status=422,
    )


@app.route("/api/qa/run", methods=["POST", "OPTIONS"])
async def run_service(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not qa_engine:
        ThotMetrics.increment_counter(short_name="qa-run", path="/api/qa/run", method="post", status=500)
        return service_not_loaded(log_context)
    try:
        data = qa_engine["run"].questionAnsweringByTKeirDoc(request.json)
        ThotMetrics.increment_counter(short_name="qa-run", path="/api/qa/run", method="post", status=200)
        return sanic.response.json(
            {
                "results": data,
                "info": qa_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_qa__,
                "date": __date_qa__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(short_name="qa-run", path="/api/qa/run", method="post", status=500)
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": qa_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_qa__,
                "date": __date_qa__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/qa/run_by_sentences", methods=["POST", "OPTIONS"])
async def run_service_by_sentence(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not qa_engine:
        ThotMetrics.increment_counter(
            short_name="qa-run-by-sentences", path="/api/qa/run_by_sentences", method="post", status=500
        )
        return service_not_loaded(log_context)
    try:
        texts = request.json["texts"]
        query = request.json["query"]
        data = qa_engine["run"].questionAnsweringBySentenceBlocks(query, texts)
        ThotMetrics.increment_counter(
            short_name="qa-run-by-sentences", path="/api/qa/run_by_sentences", method="post", status=200
        )
        return sanic.response.json(
            {
                "results": data,
                "info": qa_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_qa__,
                "date": __date_qa__,
            },
            headers={"X-Served-By": x_served_by},
            status=200,
        )
    except Exception as e:
        ThotMetrics.increment_counter(
            short_name="qa-run-by-sentences", path="/api/qa/run_by_sentences", method="post", status=500
        )
        ThotLogger.error(
            "Exception occured.",
            trace=Constants.exception_error_and_trace(str(e), str(traceback.format_exc())),
            context=log_context,
        )
        return sanic.response.json(
            {
                "error": Constants.SERVICE_INTERNAL_ERROR,
                "exception": str(e),
                "trace": str(traceback.format_exc()),
                "info": qa_engine["id"],
                "config": app.config["CONFIGURATION_FILE"],
                "version": __version_qa__,
                "date": __date_qa__,
            },
            headers={"X-Served-By": x_served_by},
            status=500,
        )


@app.route("/api/qa/health", methods=["GET", "POST", "OPTIONS"])
async def health(request):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not qa_engine:
        ThotMetrics.increment_counter(short_name="qa-health", path="/api/qa/health", method="get", status=500)
        return service_not_loaded(log_context)
    ThotMetrics.increment_counter(short_name="qa-health", path="/api/qa/health", method="get", status=200)
    return sanic.response.json(
        {
            "health": Constants.SERVICE_HEALTH_OK,
            "info": qa_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_qa__,
            "date": __date_qa__,
        },
        headers={"X-Served-By": x_served_by},
        status=200,
    )


@app.route("/metrics", methods=["GET", "POST", "OPTIONS"])
async def metrics(request):
    output = ThotMetrics.generateMetricsResponse().decode("utf-8")
    content_type = ThotMetrics.METRIC_MIME_TYPE
    return sanic.response.text(body=output, content_type=content_type)


@app.exception(NotFound)
async def function_not_found(request, exception):
    no_x_correlation = "autogenerated-" + str(uuid4())
    cid = request.headers.get("x-correlation-id") or no_x_correlation
    log_context = LogUserContext(cid)
    if not qa_engine:
        return service_not_loaded(log_context)
    return sanic.response.json(
        {
            "error": Constants.SERVICE_PAGE_NOT_FOUND,
            "info": qa_engine["id"],
            "config": app.config["CONFIGURATION_FILE"],
            "version": __version_qa__,
            "date": __date_qa__,
        },
        headers={"X-Served-By": x_served_by},
        status=400,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default=None, type=str, help="configuration file")
    parser.add_argument("-i", "--init", default=False, action="store_true")
    args=parser.parse_args()
    QAEngine.args = args
    if not QAEngine.args.config:
        ThotLogger.loads()
        ThotLogger.error("Configuration file is mandatory")
        sys.exit(-1)

    try:
        # initialize logger
        ThotLogger.loads(QAEngine.get_config().logger_config.configuration, logger_name="QA")
        ThotMetrics.APP_NAME = "T-KEIR : Q/A"
        ThotMetrics.create_counter(short_name="qa-health", function_name="health", counter_description="Health function count")
        ThotMetrics.create_counter(
            short_name="qa-run-by-sentences",
            function_name="run_by_sentence",
            counter_description="Run by sentences function count",
        )
        ThotMetrics.create_counter(short_name="qa-run", function_name="run", counter_description="run function count")
        host = QAEngine.get_config().net_config.configuration["network"]["host"]
        port = int(QAEngine.get_config().net_config.configuration["network"]["port"])
        workers = QAEngine.get_config().runtime_config.configuration["runtime"]["workers"]
        QAEngine.getqa()
        if not args.init:
            use_ssl = os.getenv("TKEIR_USE_SSL", "True")
            if ("ssl" in QAEngine.get_config().net_config.configuration["network"]) and type_to_bool(use_ssl):
                ThotLogger.info("Run service with SSL")
                app.run(
                    host=host, port=port, workers=workers, ssl=QAEngine.get_config().net_config.configuration["network"]["ssl"]
                )
            else:
                app.run(host=host, port=port, workers=workers)
    except Exception as e:
        ThotLogger.error("An error occured." + Constants.exception_error_and_trace(str(e), str(traceback.format_exc())))
        sys.exit(-1)


if __name__ == "__main__":
    os.environ["PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION"]="python"
    main()
